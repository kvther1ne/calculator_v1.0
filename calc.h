#include <locale.h>
#include <math.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define S21_EPS 1e-6
#define S21_NAN 0.0 / 0.0

/*!
\brief Структура Stack
\details Структура используется для хранения лексем при переводе входящей строки
в постфиксную нотацию и затем для вычисления ответа
 */
typedef struct sNode {
  double value;  ///< Переменная, хранящая double значение элемента стека
  struct sNode *next;  ///< Ссылка на следующий элемент стека
} Stack;

/*!
\brief Основная функция для вычисления
\details Основная функция для перевода выражения в классической (инфиксной)
нотации в польскую (постфиксную) нотацию и вычисления значения выражения
\param[in] string Входная строка с выражением в
инфиксной нотации
\param[in] result Переменная для записи результата вычисления
\param[in] x Значение переменной x
*/
int SmartCalculator(const char *string, double *result, double x);
/*!
\details Определяет числа и арифметические операции в постфиксной строке,
вызывает необходимые функции \param[in] PN Строка с выражением в постфиксной
нотации \param[in] numbers Стек для вычислений \return Результат вычисления
арифметического выражения
*/
int calculate(char *PN, Stack **numbers);
/*!
Определяет и выполняет бинарную арифметическую операцию (сумма, разность,
остаток от деления, умножение, деление, возведение в степень)
\param[in] numbers Стек для вычислений
\param[in] oper Символ оператора
\return Результат бинарной арифметической операции
*/
void binary_op(Stack **numbers, char *oper);
/*!
Определяет и применяет функцию к аргументу (тригонометрические функции,
десятичный и натуральный логарифмы, корень)
\param[in] numbers Стек для вычислений
\param[in] oper Символ функции
\return Результат применения функции
*/
int functions(Stack **numbers, char *func);

/*!
Добавляет в строку с постфиксной нотацией операнд
\param[in] lex Считанный операнд
\param[in] PN Строка с выражением в постфиксной нотации
\param[in] pn_iter Итератор для движения по строке PN
*/
void number(char *lex, char *PN, int *pn_iter);
/*!
Добавляет в стек и затем в строку с постфиксной нотацией оператор с учетом его
приоритета
\param[in] lex Считанный оператор
\param[in] PN Строка с выражением в
постфиксной нотации
\param[in] stack Стек для хранения операторов
\param[in] i
Итератор для движения по строке PN
\param[in] open_brackets_counter Переменная
для сопоставления количества открывающих и закрывающих скобок
\return Значение ошибки или её отсутствие
*/
int operand(char *lex, char *PN, Stack **stack, int *i,
            int *open_brackets_counter);
/*!
Добавляет в строку с постфиксной нотацией скобки и все операторы, лежащие между
ними
\param[in] open_brackets Количество открытвающих скобок
\param[in] PN Строка с
выражением в постфиксной нотации
\param[in] stack Стек для хранения операторов
\param[in] i
Итератор для движения по строке PN
*/
void brackets(char *PN, Stack **stack, int *i);
/*!
Вычисляет приоритет арифметического оператора
\param[in] c Считанный оператор
\return Приоритет оператора
*/
int priority(char c);

/*!
Разделяет лексемы во входной строке с арифметическим выражением пробелами
\param[in] str Входная строка с выражением в
инфиксной нотации
\param[in] pars Строка с лексемами, разделенными пробелами
\return Значение ошибки или её отсутствие
*/
int parsing(char *str, char *pars);
/*!
Разделяет лексемы во входной строке с арифметическим выражением пробелами
\param[in] str Входная строка с выражением в
инфиксной нотации
\param[in] pars Строка с лексемами, разделенными пробелами
\param[in] i Итератор для движения по входной строке
\param[in] j Итератор для движения по выходной строке
\param[in] noerr Значение ошибки или её отсутствие из предыдущей функции
*/
void parsing_helper(char *str, char *pars, int *i, int *j, int *noerr);
/*!
Добавляет функции из входной строки с арифметическим выражением в выходную
строку
\param[in] str Входная строка с выражением в
инфиксной нотации
\param[in] pars Строка с лексемами, разделенными пробелами
\param[in] i Итератор для движения по входной строке
\param[in] j Итератор для движения по выходной строке
\param[in] noerr Значение ошибки или её отсутствие из предыдущей функции
*/
void composite_parser(char *str, char *pars, int *i, int *j, int *noerr);
/*!
Добавляет числа из входной строки с арифметическим выражением в выходную
строку
\param[in] str Входная строка с выражением в
инфиксной нотации
\param[in] pars Строка с лексемами, разделенными пробелами
\param[in] i Итератор для движения по входной строке
\param[in] j Итератор для движения по выходной строке
\param[in] noerr Значение ошибки или её отсутствие из предыдущей функции
*/
void num_parcer(char *str, char *pars, int *i, int *j, int *noerr);
/*!
Добавляет символ из входной строки с арифметическим выражением в выходную
строку с разделением пробелами
\param[in] pars Строка с лексемами, разделенными пробелами
\param[in] symb Символ для добавления в выходную строку
\param[in] i Итератор для движения по входной строке
\param[in] j Итератор для движения по выходной строке
\param[in] i_add Шаг итератора по входной строке
\param[in] j_add Шаг итератора по выходной строке
*/
void add(char *pars, char symb, int *i, int *j, int i_add, int j_add);

/*!
Кладет новый элемент на вершину стека
\param[in] head Стек
\param[in] value Значение, которое необходимо добавить
*/
void push(Stack **head, double value);
/*!
Удаляет элемент с вершины стека
\param[in] head Стек
*/
int pop(Stack **head);
/*!
Возвращает элемент с вершины стека
\param[in] head Стек
*/
double peek(Stack *head);
/*!
Проверяет, является ли стк пустым
\param[in] head Стек
\return 1 - стек пуст, 0 - стек не пуст
*/
int empty(Stack *head);
/*!
Очищает стек
\param[in] head Стек
*/
void free_stack(Stack **head);